require('dotenv').config();
const redis = require('redis');
const axios = require('axios');

const API_BASE = process.env.API_BASE || 'http://localhost:3000/api';

const rebuildCache = async () => {
  try {
    console.log('üîÑ Rebuilding Redis Cache...\n');
    
    // Connect to Redis
    const client = redis.createClient({
      url: process.env.REDIS_URL || 'redis://localhost:6379',
      socket: { connectTimeout: 10000 }
    });
    
    await client.connect();
    console.log('‚úÖ Connected to Redis');
    
    // Check if Redis is empty
    const keyCount = await client.dbSize();
    console.log(`üìä Current Redis keys: ${keyCount}`);
    
    if (keyCount > 100) {
      console.log('‚ÑπÔ∏è  Cache appears to already have data. Continuing anyway...\n');
    }
    
    // List of endpoints to warm up the cache
    const endpointsToWarm = [
      '/stats/civilizations',
      '/matches/stats/overview', 
      '/stats/trends',
      '/stats/maps',
      // Top civilizations - these are commonly accessed
      '/stats/civilizations/britons/complete',
      '/stats/civilizations/franks/complete', 
      '/stats/civilizations/mongols/complete',
      '/stats/civilizations/persians/complete',
      '/stats/civilizations/spanish/complete',
      // Individual components for top civs
      '/stats/civilizations/britons/rating',
      '/stats/civilizations/britons/duration', 
      '/stats/civilizations/britons/best-against',
      '/stats/civilizations/britons/worst-against',
      '/stats/civilizations/franks/rating',
      '/stats/civilizations/franks/duration',
      '/stats/civilizations/mongols/rating', 
      '/stats/civilizations/mongols/duration'
    ];
    
    console.log(`üî• Warming up cache for ${endpointsToWarm.length} endpoints...\n`);
    
    let successCount = 0;
    let totalTime = 0;
    
    for (let i = 0; i < endpointsToWarm.length; i++) {
      const endpoint = endpointsToWarm[i];
      const progress = `[${i + 1}/${endpointsToWarm.length}]`;
      
      try {
        console.log(`${progress} üîÑ ${endpoint}`);
        const startTime = Date.now();
        
        const response = await axios.get(`${API_BASE}${endpoint}`, {
          timeout: 30000 // 30 second timeout
        });
        
        const responseTime = Date.now() - startTime;
        totalTime += responseTime;
        
        if (response.status === 200) {
          successCount++;
          console.log(`${progress} ‚úÖ ${endpoint} (${responseTime}ms)`);
        } else {
          console.log(`${progress} ‚ö†Ô∏è  ${endpoint} - HTTP ${response.status}`);
        }
        
        // Small delay between requests to avoid overwhelming the server
        await new Promise(resolve => setTimeout(resolve, 1000));
        
      } catch (error) {
        console.log(`${progress} ‚ùå ${endpoint} - ${error.message}`);
        
        if (error.message.includes('timeout')) {
          console.log(`     üí° Endpoint timed out - will be slow until optimized`);
        }
      }
    }
    
    // Check final Redis key count
    const finalKeyCount = await client.dbSize();
    console.log(`\nüìä Cache Rebuild Summary:`);
    console.log(`   ‚úÖ Successful requests: ${successCount}/${endpointsToWarm.length}`);
    console.log(`   ‚è±Ô∏è  Total time: ${Math.round(totalTime / 1000)}s`);
    console.log(`   üìà Redis keys: ${keyCount} ‚Üí ${finalKeyCount} (+${finalKeyCount - keyCount})`);
    console.log(`   üìä Average response time: ${Math.round(totalTime / endpointsToWarm.length)}ms`);
    
    if (finalKeyCount > keyCount + 10) {
      console.log('\nüéâ Cache rebuild successful!');
      console.log('üí° Test your performance again - should be much faster');
    } else {
      console.log('\n‚ö†Ô∏è  Cache rebuild may be incomplete');
      console.log('üí° Some endpoints may still be slow until they get cached');
    }
    
    await client.disconnect();
    
    // Immediate performance test
    console.log('\nüß™ Running immediate performance test...');
    const testEndpoints = [
      '/stats/civilizations',
      '/stats/civilizations/britons/complete', 
      '/stats/trends'
    ];
    
    for (const endpoint of testEndpoints) {
      try {
        const start = Date.now();
        await axios.get(`${API_BASE}${endpoint}`, { timeout: 5000 });
        const time = Date.now() - start;
        console.log(`   ${time < 1000 ? '‚úÖ' : '‚ö†Ô∏è'} ${endpoint}: ${time}ms`);
      } catch (error) {
        console.log(`   ‚ùå ${endpoint}: ${error.message}`);
      }
    }
    
    console.log('\nüöÄ Cache rebuild complete!');
    console.log('üí° Run: node scripts/performance-monitor.js full');
    
    process.exit(0);
    
  } catch (error) {
    console.error('‚ùå Cache rebuild failed:', error);
    
    if (error.code === 'ECONNREFUSED' && error.message.includes('6379')) {
      console.log('\nüí° Redis connection failed. Make sure Redis is running:');
      console.log('   npm run redis:start');
    }
    
    process.exit(1);
  }
};

// Command line options
const command = process.argv[2];

if (command === '--help' || command === '-h') {
  console.log(`
üîÑ Redis Cache Rebuilder

Usage:
  node scripts/rebuild-redis-cache.js        - Rebuild cache for common endpoints
  node scripts/rebuild-redis-cache.js --help - Show this help

This script will:
‚úÖ Connect to Redis
‚úÖ Make requests to common endpoints to populate cache
‚úÖ Test cache performance after rebuild
‚úÖ Show cache statistics

Make sure your API server is running before using this script.
`);
  process.exit(0);
}

rebuildCache();